{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","changeText","e","setState","newText","target","value","add","newItm","Math","random","state","newList","listTodo","delete","id","list2","filter","el","className","type","this","placeholder","onChange","onClick","map","i","key","text","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAkFeA,G,kBA5Eb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAcRC,WAAa,SAACC,GACZ,EAAKC,SAAS,CAAEC,QAASF,EAAEG,OAAOC,MAAOA,MAAOJ,EAAEG,OAAOC,SAhBxC,EAqBnBC,IAAM,WAEJ,IAAIC,EAAS,CAAE,GAAMC,KAAKC,SAAU,KAAQ,EAAKC,MAAMP,SACnDQ,EAAO,sBAAO,EAAKD,MAAME,UAAlB,CAA4BL,IACvC,EAAKL,SAAS,CAAEU,SAAUD,EAASN,MAAO,MAzBzB,EA8BnBQ,OAAS,SAACC,GACR,IAAMC,EAAQ,EAAKL,MAAME,SAASI,QAAO,SAACC,GAExC,OAAOA,EAAGH,KAAOA,KAInB,EAAKZ,SAAS,CACZU,SAAUG,KApCZ,EAAKL,MAAQ,CACXE,SAAU,CACR,CAAE,GAAM,EAAG,KAAQ,SAEnB,CAAE,GAAM,EAAG,KAAQ,SACnB,CAAE,GAAM,EAAG,KAAQ,UAErBT,QAAS,GACTE,MAAO,IAVQ,E,sEA8CT,IAAD,OACP,OACE,6BACE,yBAAKa,UAAU,eACb,0BAAMA,UAAU,WACd,0CACA,8CACF,2BAAOA,UAAU,YAAYC,KAAK,OAAOd,MAAOe,KAAKV,MAAML,MAAOgB,YAAY,kBAAkBC,SAAU,SAACrB,GAAD,OAAO,EAAKD,WAAWC,MAAM,6BAAM,6BAE7I,2BAAOiB,UAAU,MAAMJ,GAAG,WAAWK,KAAK,SAASd,MAAM,MAAMkB,QAASH,KAAKd,OAI/E,mCAEGc,KAAKV,MAAME,SAASY,KAAI,SAACP,EAAIQ,GAE5B,OACE,uBAAGC,IAAKD,GAAG,8BAAOR,EAAGU,MAAY,4BAAQJ,QAAS,kBAAM,EAAKV,OAAOI,EAAGH,MAAtC,UAA0D,4CAA3F,c,GAjEIc,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.63b17302.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) { // state fi wost constructor \n    super(props)\n    this.state = {  // state fi wostha tabeau listTodo\n      listTodo: [   //tableau fi wostha list des objets \n        { \"id\": 0, \"text\": \"item1\" },\n\n        { \"id\": 1, \"text\": \"item2\" },\n        { \"id\": 2, \"text\": \"item3\" },\n      ],\n      newText: '',    // state fi wostha valeur input nommé  newText \n      value: ''\n    }\n  }\n\n\n  changeText = (e) => {   //fonction changeText \n    this.setState({ newText: e.target.value, value: e.target.value })\n\n\n\n  }\n  add = () => {    // fonction add :ajouter new element \n\n    let newItm = { \"id\": Math.random(), \"text\": this.state.newText }   // new item \n    let newList = [...this.state.listTodo, newItm] // ajout new item  lel tableau donc on a newlist on peut utiliser concatination\n    this.setState({ listTodo: newList, value: '' }) //donc  listTodo bech tekhou newList \n\n  }\n\n\n  delete = (id) => {  // fonction delete  tekhou comme entre id  item a supprime \n    const list2 = this.state.listTodo.filter((el) =>     // filter tekou comme entre el a supprime et return  list2  (newlist) \n    {\n      return el.id !== id      // qui contient tous les element sauf element supprimé condition\n    }\n\n    )\n    this.setState({       // setstate pour modifacation\n      listTodo: list2     // listTOdo bech tekhou list2   \n\n\n    })\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <div className=\"todo-header\">\n          <span className=\"to-left\">\n            <h1>To-Do App!</h1>\n            <h5>Add New To-Do</h5></span>\n          <input className=\"tape-task\" type=\"text\" value={this.state.value} placeholder=\"Enter your Task\" onChange={(e) => this.changeText(e)} /><br /><br />\n\n          <input className=\"btn\" id=\"add-task\" type=\"submit\" value=\"Add\" onClick={this.add} />\n        </div>\n\n\n        <div>   { /*List */}\n\n          {this.state.listTodo.map((el, i) => {   // pour lire valeur listtodo par element avec fonction map  affichage item \n\n            return (\n              <p key={i}><span>{el.text}</span><button onClick={() => this.delete(el.id)}>delete</button><button>Complete</button> </p>\n            )\n          }\n          )}\n        </div>\n\n\n      </div>\n\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}